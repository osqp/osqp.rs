searchState.loadedDescShard("osqp_sys", 0, "Matrix in compressed-column form. The structure is used …\nFree a CSC matrix object allocated by @ref …\nAllocates a new Compressed-Column-Sparse (CSC) matrix from …\nInformation about the solution process.\nUser settings\nFree an OSQPSettings object.\nAllocate a new OSQPSettings object with the default …\nStructure to hold the computed solution (if any), and any …\nMain OSQP solver structure that holds all information.\n&lt; Function not implemented in this library\nrho stepsize adaption method\nAdaptation parameter controlling when non-fixed rho …\nInterval between rho adaptations\nTolerance applied when adapting rho.\n&lt; boolean; allocate solution in OSQPSolver during …\n&lt; ADMM relaxation parameter\n&lt; maximum number of CG iterations per solve\n&lt; Preconditioner to use in the CG method\n&lt; CG tolerance (fraction of ADMM residuals)\n&lt; number of consecutive zero CG iterations before the …\n&lt; Boolean; use duality gap termination criteria\n&lt; integer, check termination interval; if 0, checking is …\n&lt; regularization parameter for polishing\n&lt; device identifier; currently used for CUDA devices\n&lt; Dual infeasibility certificate\n&lt; Dual objective value\n&lt; Norm of dual residual\n&lt; Duality gap (Primal obj - Dual obj)\n&lt; absolute solution tolerance\n&lt; dual infeasibility tolerance\n&lt; primal infeasibility tolerance\n&lt; relative solution tolerance\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n&lt; row indices, size nzmax starting from 0\n&lt; Solver information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n&lt; Number of iterations taken\n&lt; linear system solver to use\n&lt; number of rows\n&lt; maximum number of iterations\n&lt; number of columns\n&lt; number of entries in triplet matrix, -1 for csc\n&lt; maximum number of entries\n&lt; Primal objective value\nCleanup workspace by deallocating memory\nSolver Errors  *\nLinear System Solvers *\nPreconditioners for CG method *\nGet the default settings from the osqp_api_constants.h …\nInitialize OSQP solver allocating memory.\nSolve quadratic program\nSolver Status  *\nUpdate elements of matrices P (upper triangular) and A by …\nUpdate problem data vectors @param  solver  Solver @param  …\nUpdate the ADMM parameter rho.\nUpdate problem settings.\nReturn OSQP version\nWarm start primal and dual variables @param  solver Solver …\n&lt; 1 if the p, i and x pointers were allocated …\n&lt; column pointers (size n+1); col indices (size nzmax) …\n&lt; number of iterative refinement steps in polishing\n&lt; Polish phase time (seconds)\n&lt; boolean; polish ADMM solution\n&lt; Primal infeasibility certificate\n&lt; Norm of primal residual\n&lt; Integral of duality gap over time (Primal-dual …\n&lt; integer; level of detail for profiler annotations\n&lt; Relative KKT error\n&lt; ADMM penalty parameter\n&lt; Best rho estimate so far from residuals\n&lt; boolean; is rho scalar or vector?\n&lt; Number of rho updates performned\n&lt; Total solve time (seconds)\n&lt; boolean; use scaled termination criteria\n&lt; data scaling iterations; if 0, then disabled\n&lt; Problem settings\n&lt; Setup phase time (seconds)\n&lt; ADMM penalty parameter\n&lt; Computed solution\n&lt; Solve phase time (seconds)\n&lt; Status string, e.g. ‘solved’\n&lt; Polishing status: successful (1), unperformed (0), …\n&lt; Status as OSQPInt, defined in osqp_api_constants.h\n&lt; maximum time to solve the problem (seconds)\n&lt; Update phase time (seconds)\n&lt; boolean; write out progress\n&lt; boolean; warm start\n&lt; Internal solver workspace (contents not public)\n&lt; numerical values, size nzmax\n&lt; Primal solution\n&lt; Lagrange multiplier associated with \\f$l \\le Ax \\le u\\f$")